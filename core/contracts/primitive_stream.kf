// This file is the template to be used by Data Providers to deploy their own contracts.
// A stream must conform to this same interface (read and permissions) to be eligible to officialization from our
// accepted System Streams.

database primitive_stream_db_name;

table primitive_events {
    date_value text notnull minlen(10) maxlen(10), // enforce yyyy-mm-dd format
    value decimal(36,18) notnull,
    created_at int notnull, // based on blockheight

    #identifier_idx   primary(date_value, created_at)
}

table metadata {
    row_id      uuid    primary notnull,
    metadata_key         text    notnull,
    value_i     int,                 // integer type
    value_f     decimal(36,18),
    value_b     bool,                // boolean type
    value_s     text,                // string type
    value_ref   text,                // indexed string type -- lowercase
    created_at  int     notnull,     // block height
    disabled_at int,                 // block height

    #key_idx    index(metadata_key),
    #ref_idx    index(value_ref),
    #created_idx    index(created_at) // faster sorting
}

procedure is_initiated() private view returns (result bool) {
    // check if it was already initialized
    // for that we check if type is already provided
    for $row in SELECT * FROM metadata WHERE metadata_key = 'type' LIMIT 1 {
        return true;
    }

    return false;
}

procedure is_stream_owner($wallet text) public view returns (result bool) {
    for $row in SELECT * FROM metadata WHERE metadata_key = 'stream_owner' AND value_ref = LOWER($wallet) LIMIT 1 {
        return true;
    }
    return false;
}

procedure is_wallet_allowed_to_write($wallet text) public view returns (value bool) {
    // if it's the owner, it's permitted
    if is_stream_owner($wallet) {
        return true;
    }

    // if there's metadata allow_write_wallet -> <wallet>, then its permitted
    for $row in SELECT * FROM get_metadata('allow_write_wallet', false, $wallet) {
        return true;
    }

    return false;
}

procedure is_wallet_allowed_to_read($wallet text) public view returns (value bool) {

    // if public, anyone can always read
    // If there's no visibility metadata, it's public.
    $visibility int := 0;
    for $v_row in SELECT * FROM get_metadata('read_visibility', true, null) {
        $visibility := $v_row.value_i;
    }

    if $visibility == 0 {
        return true;
    }

    // if it's the owner, it's permitted
    if is_stream_owner($wallet) {
        return true;
    }

    // if there's metadata allow_read_wallet -> <wallet>, then its permitted
    for $row in SELECT * FROM get_metadata('allow_read_wallet', false, $wallet) {
        return true;
    }

    return false;
}

procedure stream_owner_only() private view {
    if is_stream_owner(@caller) == false  {
        error('Stream owner only procedure');
    }
}

// init method prepares the contract with default values and permanent ones
procedure init() public owner {
    if is_initiated() {
        error('this contract was already initialized');
    }

    // check if caller is empty
    // this happens can happen in tests, but we should also protect for that on production
    if @caller == '' {
        error('caller is empty');
    }

    $current_block int := @height;

    // uuid's namespaces are any random generated uuid from https://www.uuidtools.com/v5
    // but each usage should be different to maintain determinism, so we reuse the previous result
    $current_uuid uuid := uuid_generate_v5('111bfa42-17a2-11ef-bf03-325096b39f47'::uuid, @txid);

    // type = primitive
    $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
    INSERT INTO metadata (row_id, metadata_key, value_s, created_at)
        VALUES ($current_uuid, 'type', 'primitive', $current_block);

    // stream_owner = @caller
    $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
    INSERT INTO metadata (row_id, metadata_key, value_ref, created_at)
        VALUES ($current_uuid, 'stream_owner', LOWER(@caller), 1);

    // compose_visibility = 0 (public)
    $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
    INSERT INTO metadata (row_id, metadata_key, value_i, created_at)
        VALUES ($current_uuid, 'compose_visibility', 0, $current_block);

    // read_visibility = 0 (public)
    $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
    INSERT INTO metadata (row_id, metadata_key, value_i, created_at)
        VALUES ($current_uuid, 'read_visibility', 0, $current_block);

    $readonly_keys text[] := [
        'type',
        'stream_owner',
        'readonly_key'
    ];

    for $key in $readonly_keys {
        $current_uuid :=  uuid_generate_v5($current_uuid, @txid);
        INSERT INTO metadata (row_id, metadata_key, value_s, created_at)
            VALUES ($current_uuid, 'readonly_key', $key, $current_block);
    }
}

// Note:    We're letting the user be the source of truth for which type a key should have.
//          To change that, we could initiate `key_type:<key>` key on metadata table, that could be used here
//          to enforce a type. However, this would force us to know every metadata key before deploying a contract
procedure insert_metadata(
    $key text,
    $value text,
    $val_type text
    // TODO: would be better to use value_x from args. However this doesn't work well for nullable inputs
    //  i.e. if we use a bool type we'll get an conversion error from Nil -> bool. And we don't want to force user to provide
    //  a value if nil is intended.
    ) public {

    $value_i int;
    $value_s text;
    $value_f decimal(36,18);
    $value_b bool;
    $value_ref text;

    if $val_type == 'int' {
        $value_i := $value::int;
    } elseif $val_type == 'string' {
        $value_s := $value;
    } elseif $val_type == 'bool' {
        $value_b := $value::bool;
    } elseif $val_type == 'ref' {
        $value_ref := $value;
    } elseif $val_type == 'float' {
        $value_f := $value::decimal(36,18);
    } else {
        error(format('unknown type used "%s". valid types = "float" | "bool" | "int" | "ref" | "string"', $val_type));
    }

    stream_owner_only();

    if is_initiated() == false {
        error('contract must be initiated');
    }

    // check if it's read-only
    for $row in SELECT * FROM metadata WHERE metadata_key = 'readonly_key' AND value_s = $key LIMIT 1 {
        error('Cannot insert metadata for read-only key');
    }

    // we create one deterministic uuid for each metadata record
    // we can't use just @txid because a single transaction can insert multiple metadata records.
    // the result will be idempotency here too.
    $uuid_key := @txid || $key || $value;

    $uuid uuid := uuid_generate_v5('1361df5d-0230-47b3-b2c1-37950cf51fe9'::uuid, $uuid_key);
    $current_block int := @height;

    // insert data
    INSERT INTO metadata (row_id, metadata_key, value_i, value_f, value_s, value_b, value_ref, created_at)
        VALUES ($uuid, $key, $value_i, $value_f, $value_s, $value_b, LOWER($value_ref), $current_block);
}

// key: the metadata key to look for
// only_latest: if true, only return the latest version of the metadata
// ref: if provided, only return metadata with that ref
procedure get_metadata($key text, $only_latest bool, $ref text) public view returns table(
        row_id uuid,
        value_i int,
        value_f decimal(36,18),
        value_b bool,
        value_s text,
        value_ref text,
        created_at int
        ) {

        if $only_latest == true {
            if $ref is distinct from null {
                return SELECT
                              row_id,
                              null::int as value_i,
                              null::decimal(36,18) as value_f,
                              null::bool as value_b,
                              null::text as value_s,
                              value_ref,
                              created_at
                FROM metadata
                WHERE metadata_key = $key AND disabled_at IS NULL AND value_ref = LOWER($ref)
                ORDER BY created_at DESC
                LIMIT 1;
            } else {
                return SELECT
                              row_id,
                              value_i,
                              value_f,
                              value_b,
                              value_s,
                              value_ref,
                              created_at
                FROM metadata
                WHERE metadata_key = $key AND disabled_at IS NULL
                ORDER BY created_at DESC
                LIMIT 1;
            }
        } else {
           // SHOULD BE THE EXACT CODE AS ABOVE, BUT WITHOUT LIMIT
           if $ref is distinct from null {
               return SELECT
                             row_id,
                             null::int as value_i,
                             null::decimal(36,18) as value_f,
                             null::bool as value_b,
                             null::text as value_s,
                             value_ref,
                             created_at
                FROM metadata
                WHERE metadata_key = $key AND disabled_at IS NULL AND value_ref = LOWER($ref)
                ORDER BY created_at DESC;
           } else {
               return SELECT
                             row_id,
                             value_i,
                             value_f,
                             value_b,
                             value_s,
                             value_ref,
                             created_at
               FROM metadata
               WHERE metadata_key = $key AND disabled_at IS NULL
               ORDER BY created_at DESC;
           }
        }
}


procedure disable_metadata($row_id uuid) public {
    stream_owner_only();

    $current_block int := @height;

    $found bool := false;

    // Check if the metadata is not read-only
    for $metadata_row in
    SELECT metadata_key
    FROM metadata
    WHERE row_id = $row_id AND disabled_at IS NULL
    LIMIT 1 {
        $found := true;
        $row_key text := $metadata_row.metadata_key;

        for $readonly_row in SELECT row_id FROM metadata WHERE metadata_key = 'readonly_key' AND value_s = $row_key LIMIT 1 {
            error('Cannot disable read-only metadata');
        }

        UPDATE metadata SET disabled_at = $current_block
        WHERE row_id = $row_id;
    }

    if $found == false {
        error('metadata record not found');
    }
}

procedure insert_record($date_value text, $value decimal(36,18)) public {
    if is_wallet_allowed_to_write(@caller) == false {
        error('wallet not allowed to write');
    }

    if is_initiated() == false {
        error('contract must be initiated');
    }

    $current_block int := @height;

    // insert data
    INSERT INTO primitive_events (date_value, value, created_at)
        VALUES ($date_value, $value, $current_block);
}

// Truflations calculation is ((current_primitive/first_primitive)*100).
// This essentially gives us the same result, but with an extra 3 digits of precision.
// index := (currentPrimitive * 100) / basePrimitive
procedure get_index($date_from text, $date_to text, $frozen_at int, $base_date text) public view returns table(
        date_value text,
        value decimal(36,18)
        ) {

    $effective_base_date text := $base_date;
    if ($effective_base_date == '') {
        for $v_row in SELECT * FROM get_metadata('default_base_date', true, null) ORDER BY created_at LIMIT 1 {
            $effective_base_date := $v_row.value_s;
        }
    }

    $baseValue decimal(36,18) := get_base_value($effective_base_date, $frozen_at);
    if $baseValue == 0::decimal(36,18) {
        error('base value is 0');
    }

    return SELECT date_value, (value * 100::decimal(36,18)) / $baseValue as value FROM get_record($date_from, $date_to, $frozen_at);
}

// get_base_value returns the first nearest value of the primitive stream before the given date
procedure get_base_value($base_date text, $frozen_at int) private view returns (value decimal(36,18)) {
    // If $base_date is null or empty, return the first-ever value from the primitive stream.
    // This ensures that when no valid $base_date is provided, we still return the earliest available data point.
    if $base_date is null OR $base_date = '' {
        for $row in SELECT * FROM primitive_events WHERE (created_at <= $frozen_at OR $frozen_at = 0 OR $frozen_at IS NULL) ORDER BY date_value ASC, created_at DESC LIMIT 1 {
            return $row.value;
        }
    }

    for $row2 in SELECT * FROM primitive_events WHERE date_value <= $base_date AND (created_at <= $frozen_at OR $frozen_at = 0 OR $frozen_at IS NULL) ORDER BY date_value DESC, created_at DESC LIMIT 1 {
        return $row2.value;
    }

    // if no value is found, we find the first value after the given date
    // This will raise a red flag in the system and the data will undergo the usual process for when a new data provider is added.
    for $row3 in SELECT * FROM primitive_events WHERE date_value > $base_date AND (created_at <= $frozen_at OR $frozen_at = 0 OR $frozen_at IS NULL) ORDER BY date_value ASC, created_at DESC LIMIT 1 {
        return $row3.value;
    }

    // if no value is found, we return an error
    error('no base value found');
}

// get_first_record returns the first record of the primitive stream (optionally after a given date - inclusive)
procedure get_first_record($after_date text, $frozen_at int) public view returns table(
    date_value text,
    value decimal(36,18)
) {
    // check read access
    if is_wallet_allowed_to_read(@caller) == false {
        error('wallet not allowed to read');
    }

    // check compose access
    is_stream_allowed_to_compose(@foreign_caller);

    // let's coalesce after_date with ''
    // then, if it's empty, it will always be the first value
    if $after_date is null {
        $after_date := '';
    }

    // coalesce frozen_at with 0
    if $frozen_at is null {
        $frozen_at := 0;
    }

    return SELECT date_value, value FROM primitive_events WHERE date_value >= $after_date AND (created_at <= $frozen_at OR $frozen_at = 0 OR $frozen_at IS NULL) ORDER BY date_value ASC, created_at DESC LIMIT 1;
}

// get_original_record returns the original value of the primitive stream for a given date
// it does not fill the gaps in the primitive stream
procedure get_original_record(
    $date_from text,
    $date_to text,
    $frozen_at int
    ) private view returns table(
    date_value text,
    value decimal(36,18)
    ) {

    check_valid_date_or_null($date_from, 'date_from');
    check_valid_date_or_null($date_to, 'date_to');

    // check read access
    if is_wallet_allowed_to_read(@caller) == false {
        error('wallet not allowed to read');
    }
    // check compose access
    is_stream_allowed_to_compose(@foreign_caller);

    $frozenValue int := 0;
    if $frozen_at IS DISTINCT FROM NULL {
        $frozenValue := $frozen_at::int;
    }

    // TODO: whereClause here is a placeholder only, not supported yet, but it will make things cleaner if it available
    //$whereClause text := 'WHERE 1=1 ';
    //if $date_from != '' {
    //    $whereClause := $whereClause || 'AND date_value >= $date_from ';
    //}

    //if $date_to != '' {
    //    $whereClause := $whereClause || 'AND date_value <= $date_to ';
    //}


    // TODO: Normally we would use the following query to get the latest value of each date
    // But it's not working for JOIN and MAX() function
    //for $row in SELECT date_value, value FROM primitive_events JOIN (SELECT date_value, MAX(created_at) as created_at FROM primitive_events GROUP BY date_value) as max_created
    //ON primitive_events.date_value = max_created.date_value AND primitive_events.created_at = max_created.created_at
    //$whereClause
    //ORDER BY date_value DESC {
    //    return next $row.date_value, $row.value;
    //}

   // TODO: had to use this workaround because && operator is not working
   $last_result_date text := '';
   if $date_from IS DISTINCT FROM NULL {
       if $date_to IS DISTINCT FROM NULL {
           // date_from and date_to are provided
           // we will fetch all records from date_from to date_to
           for $row in SELECT date_value, value FROM primitive_events
               WHERE date_value >= $date_from AND date_value <= $date_to
               AND (created_at <= $frozenValue OR $frozenValue = 0)
               AND $last_result_date != date_value
               ORDER BY date_value DESC, created_at DESC {
                   if $last_result_date != $row.date_value {
                        $last_result_date := $row.date_value;
                       return next $row.date_value, $row.value;
                   }
               }
       } else {
           // only date_from is provided
           // we will fetch all records from date_from to the latest
           for $row2 in SELECT date_value, value FROM primitive_events
               WHERE date_value >= $date_from
               AND (created_at <= $frozenValue OR $frozenValue = 0)
               AND $last_result_date != date_value
               ORDER BY date_value DESC, created_at DESC {
                   if $last_result_date != $row2.date_value {
                        $last_result_date := $row2.date_value;
                       return next $row2.date_value, $row2.value;
                   }
               }
        }
   } else {
       if $date_to IS NOT DISTINCT FROM NULL {
           // no date_from and date_to provided
           // we fetch only the latest record
           return SELECT date_value, value FROM primitive_events
               WHERE created_at <= $frozenValue OR $frozenValue = 0
               AND $last_result_date != date_value
               ORDER BY date_value DESC, created_at DESC LIMIT 1;
       } else {
           // date_to is provided but date_from is not
           error('date_from is required if date_to is provided');
       }
   }
}

// get_record returns the value of the primitive stream for a given date
// it is able to fill the gaps in the primitive stream by using the last value before the given date
// in our original implementation, the steps taken was much simpler
// 1. fetches the original range
// 2. checks if the original range's first value = start_date
// 3. if it's not, it tries fetching the last date before it, and prepends result
// The cause of this added complexity is the lack of support for storing table results in a variable
procedure get_record(
    $date_from text,
    $date_to text,
    $frozen_at int
    ) public view returns table(
    date_value text,
    value decimal(36,18)
    ) {

    $is_first_result bool := true;

    for $row in SELECT * FROM get_original_record($date_from, $date_to, $frozen_at) {
        // we will only fetch the last record before the first result
        // if the first result is not the same as the start date
        if $is_first_result == true {
            $first_result_date text := $row.date_value;

            // if the first result date is not the same as the start date, then we need to fetch the last record before it
            if $first_result_date != $date_from {
                for $last_row in SELECT * FROM get_last_record_before_date($first_result_date) {
                    // Note: although the user requested a date_from, we are returning the previous date here
                    // e.g., the user used date_from:2021-01-02, and we are returning 2021-01-01 as first value
                    //
                    // that happens because the accuracy is guaranteed with this behavior, otherwise the
                    // user won't be able to know when a data point really exist in our database or not.

                    return next $last_row.date_value, $last_row.value;
                }
            }

            $is_first_result := false;
        }

        return next $row.date_value, $row.value;
    }

    // it's still the first result? i.e. there were no results
    // so let's try finding the last record before the start date
    if $is_first_result == true {
        for $last_row2 in SELECT * FROM get_last_record_before_date($date_from) {
            return next $last_row2.date_value, $last_row2.value;
        }
    }
}

// get_last_record_before_date returns the last record before the given date
procedure get_last_record_before_date(
    $date_from text
) public view returns table(
    date_value text,
    value decimal(36,18)
    ) {
    return SELECT date_value, value FROM primitive_events WHERE date_value < $date_from ORDER BY date_value DESC, created_at DESC LIMIT 1;
}

procedure transfer_stream_ownership($new_owner text) public {
    stream_owner_only();

    // fail if not a valid address
    check_eth_address($new_owner);

    UPDATE metadata SET value_ref = LOWER($new_owner)
    WHERE metadata_key = 'stream_owner';
}

procedure check_eth_address($address text) private {
    // TODO better check when kwil supports regexp and {}[] inside strings
    // regex: ^0x[0-9a-fA-F]{40}$
    // for $row in SELECT regexp_match($address, '^0x[0-9a-fA-F]{40}$') {
    //     return true;
    // }

    if (length($address) != 42) {
        error('invalid address length');
    }

    // check if starts with 0x
    for $row in SELECT $address LIKE '0x%' as a {
        if $row.a == false {
            error('address does not start with 0x');
        }
    }
}

procedure is_stream_allowed_to_compose($foreign_caller text) public view returns (value bool) {
    // if foreign_caller is empty, then it's a direct call
    if $foreign_caller == '' {
        return true;
    }

    // if public, anyone can always read
    // If there's no visibility metadata, it's public.
    $visibility int := 0;
    for $v_row in SELECT * FROM get_metadata('compose_visibility', true, null) {
        $visibility := $v_row.value_i;
    }

    if $visibility == 0 {
        return true;
    }

    // if there's metadata allow_compose_stream -> <foreign_caller>, then its permitted
    for $row in SELECT * FROM get_metadata('allow_compose_stream', true, $foreign_caller) LIMIT 1 {
        return true;
    }

    error('stream not allowed to compose');
}

procedure get_index_change($date_from text, $date_to text, $frozen_at int, $base_date text, $days_interval int) public view returns table(
    date_value text,
    value decimal(36,18)
) {
    // the full process is this:
    // 1. we find the current values for the given date range
    // | date | value |
    // | 01-2001 | ... |
    // | 05-2001 | ... |
    // | 09-2001 | ... |
    // | 10-2001 | ... |

    // 2. we get a list of expected previous dates
    // | current_date | expected_prev_date |
    // | 01-2001       | 01-2000            |
    // | 05-2001       | 05-2000            |
    // | 09-2001       | 09-2000            |
    // | 10-2001       | 10-2000            |

    // 3. we query the real previous values for the expected previous dates, using earliest and latest dates
    // they might not match the expected previous dates
    // | real_prev_date | value |
    // | 01-2000        | ... |
    // | 03-2000        | ... |
    // | 04-2000        | ... |
    // | 09-2000        | ... |

    // 4. we try to match the expected prev dates with the real prev dates.
    // see that each expected date should be 1:1 with a result prev date.
    // | expected_prev_date | real_prev_date | result_prev_date |
    // | 01-2000            | 01-2000        | 01-2000         |
    // | -                  | 03-2000        | -               |
    // | -                  | 04-2000        | -               |
    // | 05-2000            | -              | 04-2000         |
    // | 09-2000            | 09-2000        | 09-2000         |
    // | 10-2000            | -              | 09-2000         |

    // 5. we calculate the index change for the current values and the result prev values
    // and done.

    if $frozen_at == null {
        $frozen_at := 0;
    }

    if $days_interval == null {
        error('days_interval is required');
    }

    $current_values decimal(36,18)[];
    // example: [01-2001, 05-2001, 09-2001, 10-2001]
    $current_dates text[];
    // example: [01-2000, 05-2000, 09-2000, 10-2000]
    $expected_prev_dates text[];

    for $row_current in SELECT * FROM get_index($date_from, $date_to, $frozen_at, $base_date) {
        $prev_date := format_unix_timestamp((parse_unix_timestamp($row_current.date_value, 'yyyy-MM-dd')::int - ($days_interval * 86400))::decimal(16,6), 'yyyy-MM-dd');
        $expected_prev_dates := array_append($expected_prev_dates, $prev_date);
        $current_values := array_append($current_values, $row_current.value);
        $current_dates := array_append($current_dates, $row_current.date_value);
    }

    // example: 01-2000]
    $earliest_prev_date := $expected_prev_dates[1];
    // example: 09-2000
    $latest_prev_date := $expected_prev_dates[array_length($expected_prev_dates)];

    // real previous values doesn't match the same length as expected previous dates
    // because the interval can have much more values than the expected dates
    $real_prev_values decimal(36,18)[];
    $real_prev_dates text[];

    // now we query the prev dates
    for $row_prev in SELECT * FROM get_index($earliest_prev_date, $latest_prev_date, $frozen_at, $base_date) {
        $real_prev_values := array_append($real_prev_values, $row_prev.value);
        $real_prev_dates := array_append($real_prev_dates, $row_prev.date_value);
    }

    // now we calculate the matching dates for the real prev values
    $result_prev_dates text[];
    $result_prev_values decimal(36,18)[];

    $real_prev_date_idx int := 1;

    // for each expected prev date, we find the matching real prev date
    if array_length($expected_prev_dates) > 0 {
        for $expected_prev_date_idx in 1..array_length($expected_prev_dates) {
            // we start from the last index of real prev dates. we don't need to check previous values
            for $selector in $real_prev_date_idx..array_length($real_prev_dates) {
                // if next real prev date is greater than expected prev date (or null), then we need to use the current real value
                if $real_prev_dates[$selector + 1] > $expected_prev_dates[$expected_prev_date_idx]
                   OR $real_prev_dates[$selector + 1] IS NULL {
                    // if the current real prev date is already greater than expected prev date
                    // we use NULL. We're probably before the first real prev date here
                    if $real_prev_dates[$selector] > $expected_prev_dates[$expected_prev_date_idx] {
                        $result_prev_dates := array_append($result_prev_dates, null::text);
                        $result_prev_values := array_append($result_prev_values, null::decimal(36,18));
                    } else {
                        $result_prev_dates := array_append($result_prev_dates, $real_prev_dates[$selector]);
                        $result_prev_values := array_append($result_prev_values, $real_prev_values[$selector]);
                    }
                    // we already appended one for current $real_prev_date_idx, then we need to go to next
                    $real_prev_date_idx := $selector;
                    break;
                }
            }
        }
    }

    // check if we have the same number of values and dates
    if array_length($current_dates) != array_length($result_prev_dates) {
        error('we have different number of dates and values');
    }
    if array_length($current_values) != array_length($result_prev_values) {
        error('we have different number of dates and values');
    }

    // calculate the index change
    if array_length($result_prev_dates) > 0 {
        for $row_result in 1..array_length($result_prev_dates) {
            // if the expected_prev_date is null, then we don't have a real prev date
            if $result_prev_dates[$row_result] IS DISTINCT FROM NULL {
                return next $current_dates[$row_result], ($current_values[$row_result] - $result_prev_values[$row_result]) * 100.00::decimal(36,18) / $result_prev_values[$row_result];
            }
        }
    }
}


// # Helper functions

// ## Verifiers

procedure check_valid_date_or_null($date text, $name text) private view {
    if $date IS DISTINCT FROM NULL {
        if length($date) != 10 {
            error(format('%s must be in yyyy-mm-dd format or should not be provided: received %s', $name, $date));
        }
    }
}
